//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.05.17 at 01:58:06 PM EDT 
//


package com.ztfd.crestronFusion.api.entities;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for API_Enum_NodeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="API_Enum_NodeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="None"/>
 *     &lt;enumeration value="Node"/>
 *     &lt;enumeration value="Room"/>
 *     &lt;enumeration value="Processor"/>
 *     &lt;enumeration value="Symbol"/>
 *     &lt;enumeration value="Signal"/>
 *     &lt;enumeration value="Attribute"/>
 *     &lt;enumeration value="AttributeNode"/>
 *     &lt;enumeration value="Asset"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "API_Enum_NodeType")
@XmlEnum
public enum APIEnumNodeType {

    @XmlEnumValue("None")
    NONE("None"),
    @XmlEnumValue("Node")
    NODE("Node"),
    @XmlEnumValue("Room")
    ROOM("Room"),
    @XmlEnumValue("Processor")
    PROCESSOR("Processor"),
    @XmlEnumValue("Symbol")
    SYMBOL("Symbol"),
    @XmlEnumValue("Signal")
    SIGNAL("Signal"),
    @XmlEnumValue("Attribute")
    ATTRIBUTE("Attribute"),
    @XmlEnumValue("AttributeNode")
    ATTRIBUTE_NODE("AttributeNode"),
    @XmlEnumValue("Asset")
    ASSET("Asset");
    private final String value;

    APIEnumNodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static APIEnumNodeType fromValue(String v) {
        for (APIEnumNodeType c: APIEnumNodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
